// Generated by the protocol buffer compiler.  DO NOT EDIT!

package vector_tile;

public interface VectorTile {

  public static final class Tile extends
      com.google.protobuf.nano.ExtendableMessageNano<Tile> {

    // enum GeomType
    public static final int UNKNOWN = 0;
    public static final int POINT = 1;
    public static final int LINESTRING = 2;
    public static final int POLYGON = 3;

    public static final class Value extends
        com.google.protobuf.nano.ExtendableMessageNano<Value> {

      private static volatile Value[] _emptyArray;
      public static Value[] emptyArray() {
        // Lazily initializes the empty array
        if (_emptyArray == null) {
          synchronized (
              com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
            if (_emptyArray == null) {
              _emptyArray = new Value[0];
            }
          }
        }
        return _emptyArray;
      }

      private int bitField0_;

      // optional string string_value = 1;
      private java.lang.String stringValue_;
      public java.lang.String getStringValue() {
        return stringValue_;
      }
      public Value setStringValue(java.lang.String value) {
        if (value == null) {
          throw new java.lang.NullPointerException();
        }
        stringValue_ = value;
        bitField0_ |= 0x00000001;
        return this;
      }
      public boolean hasStringValue() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      public Value clearStringValue() {
        stringValue_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      // optional float float_value = 2;
      private float floatValue_;
      public float getFloatValue() {
        return floatValue_;
      }
      public Value setFloatValue(float value) {
        floatValue_ = value;
        bitField0_ |= 0x00000002;
        return this;
      }
      public boolean hasFloatValue() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      public Value clearFloatValue() {
        floatValue_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      // optional double double_value = 3;
      private double doubleValue_;
      public double getDoubleValue() {
        return doubleValue_;
      }
      public Value setDoubleValue(double value) {
        doubleValue_ = value;
        bitField0_ |= 0x00000004;
        return this;
      }
      public boolean hasDoubleValue() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      public Value clearDoubleValue() {
        doubleValue_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      // optional int64 int_value = 4;
      private long intValue_;
      public long getIntValue() {
        return intValue_;
      }
      public Value setIntValue(long value) {
        intValue_ = value;
        bitField0_ |= 0x00000008;
        return this;
      }
      public boolean hasIntValue() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      public Value clearIntValue() {
        intValue_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      // optional uint64 uint_value = 5;
      private long uintValue_;
      public long getUintValue() {
        return uintValue_;
      }
      public Value setUintValue(long value) {
        uintValue_ = value;
        bitField0_ |= 0x00000010;
        return this;
      }
      public boolean hasUintValue() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      public Value clearUintValue() {
        uintValue_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      // optional sint64 sint_value = 6;
      private long sintValue_;
      public long getSintValue() {
        return sintValue_;
      }
      public Value setSintValue(long value) {
        sintValue_ = value;
        bitField0_ |= 0x00000020;
        return this;
      }
      public boolean hasSintValue() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      public Value clearSintValue() {
        sintValue_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      // optional bool bool_value = 7;
      private boolean boolValue_;
      public boolean getBoolValue() {
        return boolValue_;
      }
      public Value setBoolValue(boolean value) {
        boolValue_ = value;
        bitField0_ |= 0x00000040;
        return this;
      }
      public boolean hasBoolValue() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      public Value clearBoolValue() {
        boolValue_ = false;
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public Value() {
        clear();
      }

      public Value clear() {
        bitField0_ = 0;
        stringValue_ = "";
        floatValue_ = 0F;
        doubleValue_ = 0D;
        intValue_ = 0L;
        uintValue_ = 0L;
        sintValue_ = 0L;
        boolValue_ = false;
        unknownFieldData = null;
        cachedSize = -1;
        return this;
      }

      @Override
      public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeString(1, stringValue_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          output.writeFloat(2, floatValue_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          output.writeDouble(3, doubleValue_);
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          output.writeInt64(4, intValue_);
        }
        if (((bitField0_ & 0x00000010) != 0)) {
          output.writeUInt64(5, uintValue_);
        }
        if (((bitField0_ & 0x00000020) != 0)) {
          output.writeSInt64(6, sintValue_);
        }
        if (((bitField0_ & 0x00000040) != 0)) {
          output.writeBool(7, boolValue_);
        }
        super.writeTo(output);
      }

      @Override
      protected int computeSerializedSize() {
        int size = super.computeSerializedSize();
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeStringSize(1, stringValue_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeFloatSize(2, floatValue_);
        }
        if (((bitField0_ & 0x00000004) != 0)) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeDoubleSize(3, doubleValue_);
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeInt64Size(4, intValue_);
        }
        if (((bitField0_ & 0x00000010) != 0)) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeUInt64Size(5, uintValue_);
        }
        if (((bitField0_ & 0x00000020) != 0)) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeSInt64Size(6, sintValue_);
        }
        if (((bitField0_ & 0x00000040) != 0)) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeBoolSize(7, boolValue_);
        }
        return size;
      }

      @Override
      public Value mergeFrom(
              com.google.protobuf.nano.CodedInputByteBufferNano input)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!storeUnknownField(input, tag)) {
                return this;
              }
              break;
            }
            case 10: {
              stringValue_ = input.readString();
              bitField0_ |= 0x00000001;
              break;
            }
            case 21: {
              floatValue_ = input.readFloat();
              bitField0_ |= 0x00000002;
              break;
            }
            case 25: {
              doubleValue_ = input.readDouble();
              bitField0_ |= 0x00000004;
              break;
            }
            case 32: {
              intValue_ = input.readInt64();
              bitField0_ |= 0x00000008;
              break;
            }
            case 40: {
              uintValue_ = input.readUInt64();
              bitField0_ |= 0x00000010;
              break;
            }
            case 48: {
              sintValue_ = input.readSInt64();
              bitField0_ |= 0x00000020;
              break;
            }
            case 56: {
              boolValue_ = input.readBool();
              bitField0_ |= 0x00000040;
              break;
            }
          }
        }
      }

      public static Value parseFrom(byte[] data)
          throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
        return com.google.protobuf.nano.MessageNano.mergeFrom(new Value(), data);
      }

      public static Value parseFrom(
              com.google.protobuf.nano.CodedInputByteBufferNano input)
          throws java.io.IOException {
        return new Value().mergeFrom(input);
      }
    }

    public static final class Feature extends
        com.google.protobuf.nano.ExtendableMessageNano<Feature> {

      private static volatile Feature[] _emptyArray;
      public static Feature[] emptyArray() {
        // Lazily initializes the empty array
        if (_emptyArray == null) {
          synchronized (
              com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
            if (_emptyArray == null) {
              _emptyArray = new Feature[0];
            }
          }
        }
        return _emptyArray;
      }

      private int bitField0_;

      // optional uint64 id = 1 [default = 0];
      private long id_;
      public long getId() {
        return id_;
      }
      public Feature setId(long value) {
        id_ = value;
        bitField0_ |= 0x00000001;
        return this;
      }
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      public Feature clearId() {
        id_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      // repeated uint32 tags = 2 [packed = true];
      public int[] tags;

      // optional .vector_tile.Tile.GeomType type = 3 [default = UNKNOWN];
      private int type_;
      public int getType() {
        return type_;
      }
      public Feature setType(int value) {
        type_ = value;
        bitField0_ |= 0x00000002;
        return this;
      }
      public boolean hasType() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      public Feature clearType() {
        type_ = vector_tile.VectorTile.Tile.UNKNOWN;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      // repeated uint32 geometry = 4 [packed = true];
      public int[] geometry;

      public Feature() {
        clear();
      }

      public Feature clear() {
        bitField0_ = 0;
        id_ = 0L;
        tags = com.google.protobuf.nano.WireFormatNano.EMPTY_INT_ARRAY;
        type_ = vector_tile.VectorTile.Tile.UNKNOWN;
        geometry = com.google.protobuf.nano.WireFormatNano.EMPTY_INT_ARRAY;
        unknownFieldData = null;
        cachedSize = -1;
        return this;
      }

      @Override
      public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeUInt64(1, id_);
        }
        if (this.tags != null && this.tags.length > 0) {
          int dataSize = 0;
          for (int i = 0; i < this.tags.length; i++) {
            int element = this.tags[i];
            dataSize += com.google.protobuf.nano.CodedOutputByteBufferNano
                .computeUInt32SizeNoTag(element);
          }
          output.writeRawVarint32(18);
          output.writeRawVarint32(dataSize);
          for (int i = 0; i < this.tags.length; i++) {
            output.writeUInt32NoTag(this.tags[i]);
          }
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          output.writeInt32(3, type_);
        }
        if (this.geometry != null && this.geometry.length > 0) {
          int dataSize = 0;
          for (int i = 0; i < this.geometry.length; i++) {
            int element = this.geometry[i];
            dataSize += com.google.protobuf.nano.CodedOutputByteBufferNano
                .computeUInt32SizeNoTag(element);
          }
          output.writeRawVarint32(34);
          output.writeRawVarint32(dataSize);
          for (int i = 0; i < this.geometry.length; i++) {
            output.writeUInt32NoTag(this.geometry[i]);
          }
        }
        super.writeTo(output);
      }

      @Override
      protected int computeSerializedSize() {
        int size = super.computeSerializedSize();
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeUInt64Size(1, id_);
        }
        if (this.tags != null && this.tags.length > 0) {
          int dataSize = 0;
          for (int i = 0; i < this.tags.length; i++) {
            int element = this.tags[i];
            dataSize += com.google.protobuf.nano.CodedOutputByteBufferNano
                .computeUInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 1;
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeRawVarint32Size(dataSize);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(3, type_);
        }
        if (this.geometry != null && this.geometry.length > 0) {
          int dataSize = 0;
          for (int i = 0; i < this.geometry.length; i++) {
            int element = this.geometry[i];
            dataSize += com.google.protobuf.nano.CodedOutputByteBufferNano
                .computeUInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 1;
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeRawVarint32Size(dataSize);
        }
        return size;
      }

      @Override
      public Feature mergeFrom(
              com.google.protobuf.nano.CodedInputByteBufferNano input)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!storeUnknownField(input, tag)) {
                return this;
              }
              break;
            }
            case 8: {
              id_ = input.readUInt64();
              bitField0_ |= 0x00000001;
              break;
            }
            case 16: {
              int arrayLength = com.google.protobuf.nano.WireFormatNano
                  .getRepeatedFieldArrayLength(input, 16);
              int i = this.tags == null ? 0 : this.tags.length;
              int[] newArray = new int[i + arrayLength];
              if (i != 0) {
                java.lang.System.arraycopy(this.tags, 0, newArray, 0, i);
              }
              for (; i < newArray.length - 1; i++) {
                newArray[i] = input.readUInt32();
                input.readTag();
              }
              // Last one without readTag.
              newArray[i] = input.readUInt32();
              this.tags = newArray;
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              // First pass to compute array length.
              int arrayLength = 0;
              int startPos = input.getPosition();
              while (input.getBytesUntilLimit() > 0) {
                input.readUInt32();
                arrayLength++;
              }
              input.rewindToPosition(startPos);
              int i = this.tags == null ? 0 : this.tags.length;
              int[] newArray = new int[i + arrayLength];
              if (i != 0) {
                java.lang.System.arraycopy(this.tags, 0, newArray, 0, i);
              }
              for (; i < newArray.length; i++) {
                newArray[i] = input.readUInt32();
              }
              this.tags = newArray;
              input.popLimit(limit);
              break;
            }
            case 24: {
              int value = input.readInt32();
              switch (value) {
                case vector_tile.VectorTile.Tile.UNKNOWN:
                case vector_tile.VectorTile.Tile.POINT:
                case vector_tile.VectorTile.Tile.LINESTRING:
                case vector_tile.VectorTile.Tile.POLYGON:
                  type_ = value;
                  bitField0_ |= 0x00000002;
                  break;
              }
              break;
            }
            case 32: {
              int arrayLength = com.google.protobuf.nano.WireFormatNano
                  .getRepeatedFieldArrayLength(input, 32);
              int i = this.geometry == null ? 0 : this.geometry.length;
              int[] newArray = new int[i + arrayLength];
              if (i != 0) {
                java.lang.System.arraycopy(this.geometry, 0, newArray, 0, i);
              }
              for (; i < newArray.length - 1; i++) {
                newArray[i] = input.readUInt32();
                input.readTag();
              }
              // Last one without readTag.
              newArray[i] = input.readUInt32();
              this.geometry = newArray;
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              // First pass to compute array length.
              int arrayLength = 0;
              int startPos = input.getPosition();
              while (input.getBytesUntilLimit() > 0) {
                input.readUInt32();
                arrayLength++;
              }
              input.rewindToPosition(startPos);
              int i = this.geometry == null ? 0 : this.geometry.length;
              int[] newArray = new int[i + arrayLength];
              if (i != 0) {
                java.lang.System.arraycopy(this.geometry, 0, newArray, 0, i);
              }
              for (; i < newArray.length; i++) {
                newArray[i] = input.readUInt32();
              }
              this.geometry = newArray;
              input.popLimit(limit);
              break;
            }
          }
        }
      }

      public static Feature parseFrom(byte[] data)
          throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
        return com.google.protobuf.nano.MessageNano.mergeFrom(new Feature(), data);
      }

      public static Feature parseFrom(
              com.google.protobuf.nano.CodedInputByteBufferNano input)
          throws java.io.IOException {
        return new Feature().mergeFrom(input);
      }
    }

    public static final class Layer extends
        com.google.protobuf.nano.ExtendableMessageNano<Layer> {

      private static volatile Layer[] _emptyArray;
      public static Layer[] emptyArray() {
        // Lazily initializes the empty array
        if (_emptyArray == null) {
          synchronized (
              com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
            if (_emptyArray == null) {
              _emptyArray = new Layer[0];
            }
          }
        }
        return _emptyArray;
      }

      private int bitField0_;

      // required uint32 version = 15 [default = 1];
      public int version;

      // required string name = 1;
      public java.lang.String name;

      // repeated .vector_tile.Tile.Feature features = 2;
      public vector_tile.VectorTile.Tile.Feature[] features;

      // repeated string keys = 3;
      public java.lang.String[] keys;

      // repeated .vector_tile.Tile.Value values = 4;
      public vector_tile.VectorTile.Tile.Value[] values;

      // optional uint32 extent = 5 [default = 4096];
      private int extent_;
      public int getExtent() {
        return extent_;
      }
      public Layer setExtent(int value) {
        extent_ = value;
        bitField0_ |= 0x00000001;
        return this;
      }
      public boolean hasExtent() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      public Layer clearExtent() {
        extent_ = 4096;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Layer() {
        clear();
      }

      public Layer clear() {
        bitField0_ = 0;
        version = 1;
        name = "";
        features = vector_tile.VectorTile.Tile.Feature.emptyArray();
        keys = com.google.protobuf.nano.WireFormatNano.EMPTY_STRING_ARRAY;
        values = vector_tile.VectorTile.Tile.Value.emptyArray();
        extent_ = 4096;
        unknownFieldData = null;
        cachedSize = -1;
        return this;
      }

      @Override
      public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
          throws java.io.IOException {
        output.writeString(1, this.name);
        if (this.features != null && this.features.length > 0) {
          for (int i = 0; i < this.features.length; i++) {
            vector_tile.VectorTile.Tile.Feature element = this.features[i];
            if (element != null) {
              output.writeMessage(2, element);
            }
          }
        }
        if (this.keys != null && this.keys.length > 0) {
          for (int i = 0; i < this.keys.length; i++) {
            java.lang.String element = this.keys[i];
            if (element != null) {
              output.writeString(3, element);
            }
          }
        }
        if (this.values != null && this.values.length > 0) {
          for (int i = 0; i < this.values.length; i++) {
            vector_tile.VectorTile.Tile.Value element = this.values[i];
            if (element != null) {
              output.writeMessage(4, element);
            }
          }
        }
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeUInt32(5, extent_);
        }
        output.writeUInt32(15, this.version);
        super.writeTo(output);
      }

      @Override
      protected int computeSerializedSize() {
        int size = super.computeSerializedSize();
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeStringSize(1, this.name);
        if (this.features != null && this.features.length > 0) {
          for (int i = 0; i < this.features.length; i++) {
            vector_tile.VectorTile.Tile.Feature element = this.features[i];
            if (element != null) {
              size += com.google.protobuf.nano.CodedOutputByteBufferNano
                .computeMessageSize(2, element);
            }
          }
        }
        if (this.keys != null && this.keys.length > 0) {
          int dataCount = 0;
          int dataSize = 0;
          for (int i = 0; i < this.keys.length; i++) {
            java.lang.String element = this.keys[i];
            if (element != null) {
              dataCount++;
              dataSize += com.google.protobuf.nano.CodedOutputByteBufferNano
                  .computeStringSizeNoTag(element);
            }
          }
          size += dataSize;
          size += 1 * dataCount;
        }
        if (this.values != null && this.values.length > 0) {
          for (int i = 0; i < this.values.length; i++) {
            vector_tile.VectorTile.Tile.Value element = this.values[i];
            if (element != null) {
              size += com.google.protobuf.nano.CodedOutputByteBufferNano
                .computeMessageSize(4, element);
            }
          }
        }
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeUInt32Size(5, extent_);
        }
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeUInt32Size(15, this.version);
        return size;
      }

      @Override
      public Layer mergeFrom(
              com.google.protobuf.nano.CodedInputByteBufferNano input)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!storeUnknownField(input, tag)) {
                return this;
              }
              break;
            }
            case 10: {
              this.name = input.readString();
              break;
            }
            case 18: {
              int arrayLength = com.google.protobuf.nano.WireFormatNano
                  .getRepeatedFieldArrayLength(input, 18);
              int i = this.features == null ? 0 : this.features.length;
              vector_tile.VectorTile.Tile.Feature[] newArray =
                  new vector_tile.VectorTile.Tile.Feature[i + arrayLength];
              if (i != 0) {
                java.lang.System.arraycopy(this.features, 0, newArray, 0, i);
              }
              for (; i < newArray.length - 1; i++) {
                newArray[i] = new vector_tile.VectorTile.Tile.Feature();
                input.readMessage(newArray[i]);
                input.readTag();
              }
              // Last one without readTag.
              newArray[i] = new vector_tile.VectorTile.Tile.Feature();
              input.readMessage(newArray[i]);
              this.features = newArray;
              break;
            }
            case 26: {
              int arrayLength = com.google.protobuf.nano.WireFormatNano
                  .getRepeatedFieldArrayLength(input, 26);
              int i = this.keys == null ? 0 : this.keys.length;
              java.lang.String[] newArray = new java.lang.String[i + arrayLength];
              if (i != 0) {
                java.lang.System.arraycopy(this.keys, 0, newArray, 0, i);
              }
              for (; i < newArray.length - 1; i++) {
                newArray[i] = input.readString();
                input.readTag();
              }
              // Last one without readTag.
              newArray[i] = input.readString();
              this.keys = newArray;
              break;
            }
            case 34: {
              int arrayLength = com.google.protobuf.nano.WireFormatNano
                  .getRepeatedFieldArrayLength(input, 34);
              int i = this.values == null ? 0 : this.values.length;
              vector_tile.VectorTile.Tile.Value[] newArray =
                  new vector_tile.VectorTile.Tile.Value[i + arrayLength];
              if (i != 0) {
                java.lang.System.arraycopy(this.values, 0, newArray, 0, i);
              }
              for (; i < newArray.length - 1; i++) {
                newArray[i] = new vector_tile.VectorTile.Tile.Value();
                input.readMessage(newArray[i]);
                input.readTag();
              }
              // Last one without readTag.
              newArray[i] = new vector_tile.VectorTile.Tile.Value();
              input.readMessage(newArray[i]);
              this.values = newArray;
              break;
            }
            case 40: {
              extent_ = input.readUInt32();
              bitField0_ |= 0x00000001;
              break;
            }
            case 120: {
              this.version = input.readUInt32();
              break;
            }
          }
        }
      }

      public static Layer parseFrom(byte[] data)
          throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
        return com.google.protobuf.nano.MessageNano.mergeFrom(new Layer(), data);
      }

      public static Layer parseFrom(
              com.google.protobuf.nano.CodedInputByteBufferNano input)
          throws java.io.IOException {
        return new Layer().mergeFrom(input);
      }
    }

    private static volatile Tile[] _emptyArray;
    public static Tile[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new Tile[0];
          }
        }
      }
      return _emptyArray;
    }

    // repeated .vector_tile.Tile.Layer layers = 3;
    public vector_tile.VectorTile.Tile.Layer[] layers;

    public Tile() {
      clear();
    }

    public Tile clear() {
      layers = vector_tile.VectorTile.Tile.Layer.emptyArray();
      unknownFieldData = null;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.layers != null && this.layers.length > 0) {
        for (int i = 0; i < this.layers.length; i++) {
          vector_tile.VectorTile.Tile.Layer element = this.layers[i];
          if (element != null) {
            output.writeMessage(3, element);
          }
        }
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.layers != null && this.layers.length > 0) {
        for (int i = 0; i < this.layers.length; i++) {
          vector_tile.VectorTile.Tile.Layer element = this.layers[i];
          if (element != null) {
            size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeMessageSize(3, element);
          }
        }
      }
      return size;
    }

    @Override
    public Tile mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!storeUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 26: {
            int arrayLength = com.google.protobuf.nano.WireFormatNano
                .getRepeatedFieldArrayLength(input, 26);
            int i = this.layers == null ? 0 : this.layers.length;
            vector_tile.VectorTile.Tile.Layer[] newArray =
                new vector_tile.VectorTile.Tile.Layer[i + arrayLength];
            if (i != 0) {
              java.lang.System.arraycopy(this.layers, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = new vector_tile.VectorTile.Tile.Layer();
              input.readMessage(newArray[i]);
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = new vector_tile.VectorTile.Tile.Layer();
            input.readMessage(newArray[i]);
            this.layers = newArray;
            break;
          }
        }
      }
    }

    public static Tile parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new Tile(), data);
    }

    public static Tile parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new Tile().mergeFrom(input);
    }
  }
}
